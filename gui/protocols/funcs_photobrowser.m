function cell_out = funcs_photobrowser(fnc, handles, varargin),

%%% The required behavior of any protocol file for when it's called with no
%%% argument is that it exposes the functions that it implements.
%%% When a subfunction is added, make it visible by adding it's name here.
if nargin == 0,
    cell_out = {'online_settings', ...
        'calibration_settings', ...
        'experiment_settings', ...
        'run_experiments'};
    return;
end

%%% Start of part that should be left untouched.
fh = str2func(fnc);
[cell_out{1:nargout(fh)}] = fh(varargin{:});
if ~islogical(cell_out{1}),
    error('first output parameter of each subfunction must be bool');
end
%%% End of part that should be left untouched.

end

%%% Here you can add your own functions. They can overwrite those in
%%% default (fill_defaults is false), or extend them (fill_defaults is
%%% true). Any function added will only be visible if it's name is added
%%% above.
function [fill_defaults, bbci] = online_settings(varargin),
if strcmp(varargin{1}, 'variables'),
    fill_defaults = false;
    bbci = {};
    return
elseif ~isempty(varargin{1}),
    bbci = varargin{1};
end
bbci.source.acquire_fcn = @bbci_acquire_sigserv;
bbci.source.acquire_param = {struct('fs', 100)};
bbci.log.output = 'file';
bbci.log.classifier = 1;
bbci.control.fcn = @bbci_control_ERP_Speller_binary;
bbci.feedback.receiver = 'tobi_c';
bbci.feedback.host = '127.0.0.1';
bbci.feedback.port = 12345;
bbci.quit_condition.marker = 254;
bbci.adaptation.active= 0;
bbci.adaptation.fcn= @bbci_adaptation_pcov_ERP;
bbci.adaptation.load_classifier= 0; % no need to load classifier
opt_adapt = [];
opt_adapt.alpha = 0.05;
opt_adapt.mrk_end_of_segment = 2;
opt_adapt.min_n_data_points = 100;
opt_adapt.mrk_stimuli = [20:32]; 
bbci.adaptation.param= {opt_adapt};
fill_defaults = true;
end

function [fill_defaults, bbci] = calibration_settings(varargin),
if ~isempty(varargin{1}) && strcmp(varargin{1}, 'variables'),
    fill_defaults = false;
    bbci = {};
    return
elseif ~isempty(varargin{1}),
    bbci = varargin{1};
end

global TODAY_DIR;

% get preset intervals
ivals = [80,350; 360, 800];
deltas = [20, 60];
opt.cfy_ival = [];
for k=1:size(ivals,1)
    t_lims = ivals(k,:);
    dt = deltas(k);
    sampling_points = t_lims(1):dt:t_lims(2);
    tmp_ivals = round([sampling_points' - dt/2, sampling_points' + dt/2]);
    opt.cfy_ival = [opt.cfy_ival; tmp_ivals];
end

bbci.calibrate.folder = TODAY_DIR;
bbci.calibrate.file =  'SETBYGUI';
bbci.calibrate.read_fcn = @file_readBV;
bbci.calibrate.read_param = {'fs', 100};
bbci.calibrate.marker_fcn = @mrkdef_photobrowser;
bbci.calibrate.marker_param = {'stimDef', {[120:132], [20:32]; 'Target', 'Non-target'}, ...
    'nClasses', 12, 'nRepetitions', 12};
bbci.calibrate.save.file = 'bbci_classifier';
bbci.calibrate.save.overwrite = 0;
bbci.calibrate.fcn = @bbci_calibrate_ERP_Speller;
bbci.calibrate.settings = strukt(...
    'disp_ival', [-150 1000], ...
    'ref_ival', [-150 0], ... % be aware that if this is turned off, a bandpass filter should be set
    'band', 40, ... 
    'cfy_clab', {'not','E*','Fp*','AF*','A*'}, ...
    'cfy_ival', opt.cfy_ival, ...
    'control_per_stimulus', 1, ...
    'model', {'RLDAshrink', 'store_means', 1, 'store_cov', 1}, ...
    'nSequences', [], ...
    'nClasses', [], ...
    'cue_markers', [20:32], ...
    'create_figs', 0);
bbci.calibrate.early_stopping_fnc = @bbci_train_rankdiff;
bbci.calibrate.early_stopping_param = {'indices', {[1:6], [7:12];'rows', 'columns'}, ...
    'nClasses', 12, ...
    'nIters', 12};
bbci.calibrate.save.figure = 1;
fill_defaults = true;
end

function [fill_defaults, experiments] = experiment_settings(varargin),
%%% This function is potentially very verbose, as it defines all the
%%% parameters for the different experiments.
if strcmp(varargin{1}, 'variables'),
    fill_defaults = false;
    experiments = {};
    return
end

global TODAY_DIR VP_CODE DROPBOX GTEC_SERIAL TMP_DIR VP_SCREEN

VP_SCREEN = [1280, 0, 1024, 768];

experiments.classifier_name = {'bbci_classifier'};
experiments.allowed_files = {'PhotoBrowser_train_full', 'PhotoBrowser_train_mask', 'PhotoBrowser_train_flash'};
experiments.experiment_names = {'Rest state EEG', ...
    'Artifact measurement', ...
    'Short rest state EEG', ...
    'Calibration full', ...
    'Calibration flash', ...
    'Calibration mask', ...
    'Standard task 1',  ...
    'Standard task 2', ...
    'Standard task 3', ...
    'Standard task 4', ...
    'Standard task 5', ...
    'Free mode'};
experiments.requires_online = [0 0 0 0 0 0 1 1 1 1 1 1];
experiments.requires_adaptation = [0 0 0 0 0 0 0 0 0 0 0 1];
experiments.requires_stopping = [0 0 0 0 0 0 0 0 0 0 0 1];
experiments.editable_params = {
    {}, ...
    {}, ...
    {}, ...
    {}, ...
    {}, ...
    {}, ...
    {}, ...
    {}, ...
    {}, ...
    {}, ...
    {}, ...
    {'num_iterations'}, ...
    };

% set some 
experiments.aux.dropbox_root = DROPBOX;
experiments.aux.sigserv_template = [DROPBOX '\settings\template_sigserv_config.xml'];
experiments.aux.custom_settings_folder = [DROPBOX '\settings\'];
experiments.aux.standard_root = [TMP_DIR 'Home\'];
experiments.aux.pb_db = 'E:\svn\p300_photobrowser\p300_database.sqlite';
experiments.aux.gtec_serial = GTEC_SERIAL;

% preset the standard pyff parameters
pypa = strukt('logging_directory', [TODAY_DIR 'pblog\'], ...
    'screen_x', VP_SCREEN(1), ...
    'screen_y', VP_SCREEN(2), ...
    'screen_width', VP_SCREEN(3), ...
    'screen_height', VP_SCREEN(4), ...
    'num_blocks', 2, ...
    'num_subtrials_per_iteration', 2, ...
    'num_trials', 4, ...
    'num_iterations', 12, ...
    'cue_presentation_duration', 5000, ...
    'inter_block_countdown_duration', 3000, ...
    'inter_block_pause_duration', 8000, ...
    'inter_stimulus_duration', 100, ...
    'inter_trial_duration', 3000, ...
    'post_cue_presentation_pause_duration', 1000, ...
    'post_subtrail_pause_duration', 1000, ....
    'pre_cue_pause_duration', 1000, ...
    'result_presentation_duration', 2000, ...
    'stimulus_duration', 100, ...
    'display_selection_enable', true, ...
    'mask_sequence_enable', true, ...
    'online_mode_enable', true, ...
    'row_col_eval_enable', true, ...
    'show_empty_image_frames_enable', false, ...
    'early_stopping_enable', false, ...
    'startup_sleep_duration', 2000, ...
    'mask_enable', true, ...
    'flash_enable', true, ...
    'rotation_enable', true, ...
    'scaling_enable', true, ...
    'testing_mode', false, ...
    'personal_directory', '__ROOT__/Condiviso/');

% set the final experiment parameters
ex.pa.(genvarname('Rest state EEG')) = strukt(...
    'filename', 'PhotoBrowser_rest', ...
    'n_blocks', 3, ...
    'eyes_open_time', 60000, ...
    'eyes_closed_time', 60000);
ex.pa.(genvarname('Short rest state EEG')) = ...
    propertylist2struct(ex.pa.(genvarname('Rest state EEG')), ...
    'filename', 'PhotoBrowser_rest_short', ...
    'n_blocks', 1);
ex.pa.(genvarname('Artifact measurement')) = strukt(...
    'filename', 'PhotoBrowser_artifact', ...
    'n_blocks', 6, ...
    'time_for_movement', 4500, ...
    'pause_after_n_blocks', 3, ...
    'pause_time', 10000, ...
    'directions', {'F8', 'F9', 'F10', 'F11'});
ex.pa.(genvarname('Calibration full')) = ...
    propertylist2struct(pypa, ...
    'copy_task', true, ...
    'online_mode_enable', false, ...
    'root_directory', experiments.aux.standard_root, ...
    'filename', 'PhotoBrowser_train_full_', ...
    'mask_enable', true, ...
    'rotation_enable', true, ...
    'scaling_enable', true, ...
    'flash_enable', true);
ex.pa.(genvarname('Calibration mask')) = ...
    propertylist2struct(pypa, ...
    'copy_task', true, ...
    'online_mode_enable', false, ...
    'root_directory', experiments.aux.standard_root, ...
    'filename', 'PhotoBrowser_train_mask_', ...
    'mask_enable', true, ...
    'rotation_enable', false, ...
    'scaling_enable', false, ...
    'flash_enable', false);
ex.pa.(genvarname('Calibration flash')) = ...
    propertylist2struct(pypa, ...
    'copy_task', true, ...
    'online_mode_enable', false, ...
    'root_directory', experiments.aux.standard_root, ...
    'filename', 'PhotoBrowser_train_flash_', ...
    'mask_enable', false, ...
    'rotation_enable', false, ...
    'scaling_enable', false, ...
    'flash_enable', true);
ex.pa.(genvarname('Standard task 1')) = ...
    propertylist2struct(pypa, ...
    'num_blocks', 2, ...
    'num_trials', 3, ...
    'filename', 'PhotoBrowser_standard_1_', ...
    'root_directory', experiments.aux.standard_root);
ex.pa.(genvarname('Standard task 2')) = ...
    propertylist2struct(pypa, ...
    'num_blocks', 2, ...
    'num_trials', 3, ...
    'filename', 'PhotoBrowser_standard_2_', ...
    'root_directory', experiments.aux.standard_root);
ex.pa.(genvarname('Standard task 3')) = ...
    propertylist2struct(pypa, ...
    'num_blocks', 3, ...
    'num_trials', 3, ...
    'filename', 'PhotoBrowser_standard_3_', ...
    'root_directory', experiments.aux.standard_root);
ex.pa.(genvarname('Standard task 4')) = ...
    propertylist2struct(pypa, ...
    'num_blocks', 5, ...
    'num_trials', 3, ...
    'filename', 'PhotoBrowser_standard_4_', ...
    'root_directory', experiments.aux.standard_root);
ex.pa.(genvarname('Standard task 5')) = ...
    propertylist2struct(pypa, ...
    'num_blocks', 5, ...
    'num_trials', 3, ...
    'filename', 'PhotoBrowser_standard_5_', ...
    'root_directory', experiments.aux.standard_root);
ex.pa.(genvarname('Free mode')) = ...
    propertylist2struct(pypa, ...
    'num_blocks', 20, ...
    'filename', 'PhotoBrowser_free_mode_', ...
    'root_directory', [experiments.aux.dropbox_root VP_CODE filesep]);

experiments.parameters = ex.pa;
fill_defaults = false;
end

function [fill_defaults, output] = run_experiments(varargin),
%%% This function is potentially very verbose, as it defines all the
%%% parameters for the different experiments.
if strcmp(varargin{1}, 'variables'),
    fill_defaults = false;
    output = {};
    return
end

global VP_CODE
output = [];
fill_defaults = false;
experiment = varargin{1}.experiment;
ES = varargin{1}.parameters;
bbci = varargin{1}.bbci;
aux = varargin{1}.aux;
ES.use_signal_server = strcmp(func2str(bbci.source.acquire_fcn), 'bbci_acquire_sigserv');

switch experiment,
    case genvarname({'Rest state EEG', 'Short rest state EEG'})
        seq = ['P2000 f21P2000 ' ...
            sprintf('R[%d](F15P%d F14P%d) ', ES.n_blocks, ES.eyes_open_time, ES.eyes_closed_time)...
            'F20P1000'];
        [seq, wav, opt]= setup_artifacts_and_resting_measurement('language', 'italian', ...
            'seq', seq, 'show_description', 0);
        opt.test = 1;        
        stim_artifactMeasurement(seq, wav, opt);
    case genvarname('Artifact measurement'),
        seq = sprintf('P2000 F15P3000 f6f7P%d', ES.time_for_movement);
        n_directions = length(ES.directions);
        for b=1:ES.n_blocks
            idx = randperm(n_directions);
            for k=1:n_directions
                seq = sprintf('%s%sP%d ', seq, ES.directions{idx(k)}, ES.time_for_movement);
                seq = sprintf('%sF7P%d ', seq, ES.time_for_movement);
            end
            if ES.pause_after_n_blocks && mod(b, ES.pause_after_n_blocks)==0 && b<ES.n_blocks
                seq = sprintf('%sf21P%d f6f7P%d', seq, ES.pause_time, ES.time_for_movement);
            end
        end
        seq = sprintf('%sP2000 F20P1000', seq);
        [seq, wav, opt]= setup_artifacts_and_resting_measurement('language', 'italian', ...
            'seq', seq, 'show_description', 0);
        opt.test = 1;
        stim_artifactMeasurement(seq, wav, opt);
    otherwise, %it's a pyff experiment, and we completely defined those in the settings
        % first check for personal file
        try, rmdir(aux.standard_root, 's'); end;
        copyfile([aux.dropbox_root 'Training\Training_task'], aux.standard_root);        
        pyff('init', 'p300_photobrowser'); 
        pause(2);
        fns = fieldnames(ES);
        for fn = 1:length(fns),
            pyff('set', fns{fn}, ES.(fns{fn}));
            pause(.05);
        end
        pause(1);
        pyff('play');
end
end
